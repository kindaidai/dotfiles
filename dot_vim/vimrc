"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=$HOME/.vim/bundles/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state($HOME . '/.vim/bundles/')
  call dein#begin($HOME . '/.vim/bundles/')
  " プラグインリスト TOMLファイル
  " あらかじめ用意する
  let s:toml_dir  = $HOME . '/.vim'
  let s:toml	  = s:toml_dir . '/dein.toml'
  let s:lazy_toml = s:toml_dir . '/dein_lazy.toml'
  " TOMLを読み込み、キャッシュさせる
  call dein#load_toml(s:toml,      {'lazy': 0})
  call dein#load_toml(s:lazy_toml, {'lazy': 1})

  " Let dein manage dein
  " Required:
  " call dein#add('/Users/kindaichidai/.vim/bundles/repos/github.com/Shougo/dein.vim')

  " Add or remove your plugins here like this:
  "call dein#add('Shougo/neosnippet.vim')
  "call dein#add('Shougo/neosnippet-snippets')

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

"End dein Scripts-------------------------

" ----
" 編集
" ----
set fenc=utf-8
" ファイルを上書きする前にバックアップを作らない
set nobackup
set noswapfile
" 外部で変更があった場合に読み直す
set autoread
" :bコマンドでbufferを切り替える時に編集中ファイルを保存しなくても良くなる。
set hidden
set showcmd
" use clibboard"
set clipboard+=unnamed

" ----
" 検索
" ----
set hlsearch
" 大文字小文字を区別しない
set ignorecase
" インクリメンタルサーチ（文字を入力した時点で検索開始）
set incsearch

" ----
" 入力
" ----
set backspace=indent,eol,start
set shiftwidth=2
set tabstop=4
set mouse=a

" ----
" キーマップ
" ----
imap <C-p> <Up>
imap <C-n> <Down>
imap <C-b> <Left>
imap <C-f> <Right>
imap <C-e> <C-o>$
imap <C-a> <C-o>^

" ----
" コマンド
" ----
command W w
command Q q
command Wq wq
command WQ wq

" ----
" プラグイン
" ----

" nerdtree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" https://github.com/scrooloose/nerdtree/issues/928
let g:NERDTreeNodeDelimiter = "\u00a0"
" to show dot files
let NERDTreeShowHidden = 1
" NERDTreeだけが残る場合はvim終了
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" タブ移動キーマッピング
nnoremap <C-n> gt
nnoremap <C-p> gT
map <C-n> :NERDTreeToggle<CR>

" vim-gitgutter
set updatetime=250

" vim-devicons
set encoding=UTF-8
" フォルダアイコンの表示をON
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ''

" lightline
let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'active': {
        \   'left': [
        \     ['mode', 'paste'],
        \     ['fugitive','filename'],
        \   ]
        \  },
        \  'component_function': {
        \    'fugitive': 'MyFugitive',
        \    'filename': 'MyFilename',
        \  },
        \ 'subseparator': {'left': '|', 'right': '|'}
        \ }

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let _ = fugitive#head()
      return strlen(_) ? '⭠ '._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! MyFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

" vim-tags
let g:vim_tags_project_tags_command = "/usr/local/bin/ctags -R {OPTIONS} {DIRECTORY} 2>/dev/null"
let g:vim_tags_gems_tags_command = "/usr/local/bin/ctags -R {OPTIONS} `bundle show --paths` 2>/dev/null"
set tags+=tags,Gemfile.lock.tags

" indentline
let g:indentLine_leadingSpaceChar = '.'
let g:indentLine_leadingSpaceEnabled = 1

" ----
" 見た目
" ----
set number
set cursorline
hi clear CursorLine
hi CursorLine term=reverse cterm=none ctermbg=242
set cursorline
" set cursorcolumn
set virtualedit=onemore
set smartindent
set showmatch
set laststatus=2
" 右端で折り返さない
set nowrap
" シンタックスハイライト
syntax on
"タブ、空白、改行の可視化
set list
set listchars=tab:>.,trail:-,eol:↲,extends:>,precedes:<,nbsp:%
" eol, extends, precedes
hi NonText ctermbg=NONE ctermfg=240
" nbsp, tab, trail
hi SpecialKey ctermbg=NONE ctermfg=240

"全角スペースをハイライト表示
function! ZenkakuSpace()
    highlight ZenkakuSpace cterm=reverse ctermfg=DarkMagenta gui=reverse guifg=DarkMagenta
endfunction

if has('syntax')
    augroup ZenkakuSpace
        autocmd!
        autocmd ColorScheme       * call ZenkakuSpace()
        autocmd VimEnter,WinEnter * match ZenkakuSpace /　/
    augroup END
    call ZenkakuSpace()
endif
